
# Introduction {.unnumbered}

Numerical methods for differential equations are among the most important and numerous methods in numerical analysis, all with specifics strength and weaknesses. They all have, however, some parameters that need to be chosen, if only for the step size.

These parameters have to be chosen to maximize performances, and depends on the problem. In some cases, the optimal parameters can be determined analytically, in other cases they are taken using some heuristic techniques and in the last case they can be searched for numerically. 

In this thesis, we do the latter, on a specific, restricted set of problems. We motivate the use of numerical ODE solvers to solve linear systems. We take as a case study a specific type of linear systems, which appears when discretizing the steady state, one dimensional convection diffusion equation. To solve these systems,  This numerical solver has two parameters, a pseudo time step $\Delta t$ and another parameter $\alpha$, which need to be chosen. 

We then explore how to optimize these two parameters by taking into account two other parameters that define the linear system we have to solve. In particular, we use reinforcement learning to do so. 

The method of reinforcement learning can claim its origin from both the field of animal learning (learning by trial and error) and optimal control theory. The general idea is to train an agent to make decisions based on an environment, and rewarding, or punishing this agent when it makes good, or bad decisions. Over time, the agent then learn to make better and better decisions by using its past experiences to maximize the reward it gets. This approach has been used successfully in a number of problems, such as for example playing games at a high level (), or discovering matrix multiplication algorithms @Fawzi2022. 

In this thesis, we introduce reinforcement learning main concepts, such as Markov decision process, state, action and rewards. We then introduce policy gradient methods and use it to optimize the solver parameters for the studied  linear systems. The results, while positive, are hampered mainly by the fact that the implemented reinforcement learning was "forced" into the problem.


