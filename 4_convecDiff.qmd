---
author: "MÃ©lanie Fournier"
jupyter: python3
---

# A test problem - Convection diffusion equation

As a test case for the solver, we consider the one dimensional, steady state convection-diffusion equation with fixed boundary condition

$$
    u_x = bu_{xx} + 1 ,  \quad u(0) = u(1) = 0
$${#eq-convec_diff_steady}

where $b$ is some physical parameter, proportional to the diffusion coefficient of the medium. Moreover, $u(x)$ is defined for $x$ on the interval $[0,1]$. This equation has an analytical solution that is given by

$$
u(x) = x - \frac{e^{-(1-x)/b} - e^{-1/b}}{1-e^{-1/b}}.
$${#eq-convec_diff_th_solution}


We are however interested in solving this numerically, with a finite difference approach. We partition the interval $[0,1]$ into equidistant points $x_i, i = 0, \dots n+1$. We note the distance between each points as $\Delta x = \frac{1}{n+1}$, and we have $u(x_0) = u(0) = 0$ and $u(x_{n+1}) = u(1) = 0$. We use the notation $u^i = u(x_i)$. We approximate, for $i \geq 1$ the derivative 

$$
    u_x^i = \frac{u^i - u^{i-1}}{\Delta x}
$$
and the second order derivative is approximated by 
$$
    u^i_{xx} = \frac{u^{i+1} - 2u^i + u^{i-1}}{\Delta x ^2}
$$

Note that the first derivative is approximated backward in time. For $i = 1 , \dots , n$, we thus have the approximation 

$$
u_x^i =  \frac{u^i - u^{i-1}}{\Delta x}  = b \frac{u^{i+1} - 2u^i + u^{i-1}}{\Delta x ^2} + 1
$$

This can be given in matrix format by letting $u = (u^1,\dots, u^{n})^T$

$$
    Au = Bu + d
$$

where $d = (1,1,\dots , 1)^T$,

$$
A = \frac{1}{\Delta x}\begin{bmatrix}
    1 &  &&&\\
    -1 & 1 &&\\
    & -1 & 1 &\\
    &&\ddots & \ddots &\\
    &&&-1& 1 
\end{bmatrix}    
$$

and 

$$
B =  \frac{b}{\Delta x ^2}\begin{bmatrix}
    -2 & 1 &&&\\
    1 & \ddots & \ddots &&\\
    & \ddots & \ddots & \ddots&\\
    && \ddots & \ddots & 1 &\\
    &&&1 & -2  
\end{bmatrix} .
$$

With $N = A-B$, we have to solve the linear system 

$$
Nu = d
$$ {#eq-UnscaledSystem}

where $N$ is a square matrix of dimension $n \times n$ and $d$ is the one vector of dimension $n$.

:::{.remark}
It is apparent that $N$ is diagonally dominant. Since all elements of the diagonal are positive, we can use Gershgorin circle theorem to prove that all the eigenvalues of $N$ have a positive real part. Assuming $N$ is non singular, we then have that $-N$ is stable.
:::

We plot two examples of what the theoretical solution (@eq-convec_diff_th_solution) and the discretized solution (@eq-UnscaledSystem) look like for different $b$ parameters in @fig-th_vs_dis

```{python}
#| echo: false
#| output: false
import numpy as np
import matplotlib.pyplot as plt
from testProblemClass import TestProblem
```

```{python}
#| layout-ncol: 2
#| fig-cap: "Theoretical and discretized solution of the convection diffusion equation, for different parameters."
#| fig-subcap: 
#|   - "$b = 0.05$, $n=50$."
#|   - "$b = 0.5$, $n=50$."
#| echo: false
#| label: fig-th_vs_dis


n = 50
b = 0.05
problem = TestProblem(b = b,n = n)

M = problem.M
e = problem.e

y = np.linalg.solve(M,e)

x = np.linspace(0,1,n)
y_th = x - (np.exp(-(1-x)/b) - np.exp(-1/b))/(1-np.exp(-1/b))

fig , ax = plt.subplots()
ax.plot(x,y_th,label='theoretical solution')
ax.plot(x,y,label='discretized solution')
ax.legend()
ax.set_xlabel('x')
ax.set_ylabel('u(x)')

plt.show()

b = 0.5
n = 50
problem.update(b = b, n = n)


M = problem.M
e = problem.e

y = np.linalg.solve(M,e)

x = np.linspace(0,1,n)
y_th = x - (np.exp(-(1-x)/b) - np.exp(-1/b))/(1-np.exp(-1/b))

fig , ax = plt.subplots()
ax.plot(x,y_th,label='theoretical solution')
ax.plot(x,y,label='discretized solution')
ax.legend()
ax.set_xlabel('x')
ax.set_ylabel('u(x)')

plt.show()
```


To solve this linear system, we use the method highlighted before. To make it easier for later, we chose to scale $M$ so that its diagonal elements are $1$. This allows us to have all eigenvalues in the circle centered around $1$ with radius $1$ independently of the parametrization. Setting $\eta = \frac{1}{\Delta x} + \frac{2b}{\Delta x^2}$, solving @eq-UnscaledSystem is equivalent to solving the system

$$
M u = e
$${#eq-test_problem_scaled_system}

where with $M = M/\eta$, $e_s = e/\eta$. The eigenvalues of $M$ are also scaled by $1/\eta$ so $-M$ is stable, assuming it is non singular. We are now ready to solve the system iteratively using ODE solver. 

We thus introduce a pseudo time variable $t$ and we consider the ODE.

$$
u'(t) = e - Mu(t)
$${#eq-test_problem_diff_eq}

We can use @thm-steadyState with the non singularity assumption to guarantee that the ODE will converge to a steady state independently of the initial value we chose. In the next chapter, we will then solve this differential equation with a numerical solver.

