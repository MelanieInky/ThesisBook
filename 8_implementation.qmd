---
author: "MÃ©lanie Fournier"
format: 
    html:
        code-fold: true
    pdf:
        geometry: 
        - top=30mm
        - left=20mm
        number-sections: true
jupyter: python3
---


# Implementation

## A linear approximation of the policy.


We want to have a policy of the form $(\Delta t, \alpha) =A(b,n)' + \text{c}$, where $A$ is a two by two matrix and $c$ a 2-vector.

We define the following stochastic policy, define first

$$
\begin{pmatrix}
\mu_\alpha \\
\mu_{\Delta t}
\end{pmatrix} = 
\begin{pmatrix}
\theta_0 & \theta_1\\
\theta_2 & \theta_3
\end{pmatrix} 
\begin{pmatrix}
b\\
n
\end{pmatrix} +
\begin{pmatrix}
\theta_4\\
\theta_5
\end{pmatrix}
$$

Then we chose the random policy $\alpha \sim \mathcal{N}(\mu_\alpha,\sigma^2)$,and similarly $\Delta t \sim \mathcal{N}(\mu_{\Delta t}, \sigma^2)$. The term $\sigma^2$, which is the variance of the policy is chosen fixed, and will help us balance exploration vs exploitation. Since $\alpha$ and $\Delta t$ are chosen independently, the joint probability density of both parameters is the product of both marginal pdf, that is 

$$
f(\alpha,\Delta t) = f_{1}(\alpha)\cdot f_{2}(\Delta t)
$$

where 
$$
f_1(\alpha) = \frac{1}{\sqrt{2\pi}\sigma}\exp\left(-\frac{(\alpha - \theta_0b-\theta_1n-\theta_4)^2}{2\sigma^2}\right)
$$

and similarly,

$$
f_2(\Delta t) = \frac{1}{\sqrt{2\pi}\sigma}\exp\left(-\frac{(\Delta t - \theta_2b-\theta_3n-\theta_5)^2}{2\sigma^2}\right)
$$.

Taking the logarithm, we get $\ln(f(\alpha,\Delta t) = \ln(f_1(\alpha)) + \ln(f_2(\Delta t))$. Thus,

$$
\ln(f_1(\alpha)) = \ln(\frac{1}{\sqrt{2\pi}\sigma}) - \frac{(\alpha - \theta_0b-\theta_1n-\theta_4)^2}{2\sigma^2} 
$$.

We now take the gradient w.r.t $\theta$ to get

$$
\nabla_\theta \ln(f_1(\alpha)) = \xi_\alpha (b\theta_0,n\theta_1,0,0,\theta_4,0)^T
$$

where $\xi_\alpha = \frac{(\alpha - \theta_0b-\theta_1n-\theta_4)}{\sigma^2}$.

Doing a similar thing with $\Delta t$, we get the gradient,

$$
\nabla_\theta \ln(f_2(\Delta t)) = \xi_{\Delta t}(0,0,b\theta_2,n\theta_3,0,\theta_5)^T.
$$

where $\xi_{\Delta t} = \frac{(\Delta t - \theta_2b-\theta_3n-\theta_5)}{\sigma^2}$
We now add both gradients together to we get the gradient of the policy, for a specific action $a = (\alpha, \Delta t)$ and state $s=(b,n)$,

$$
\nabla_\theta \ln\pi(a|s,\theta) =  \xi_\alpha (b\theta_0,n\theta_1,0,0,\theta_4,0)^T+ \xi_{\Delta t}(0,0,b\theta_2,n\theta_3,0,\theta_5)^T.
$$ {#eq-policyGradient}

We used here the standard notation. That is, $\pi(a|s,\theta) = f(\alpha,\Delta t)$.






:::{.remark}
One may remark that the REINFORCE algorithm uses a discrete policy space. This is not an issue. Instead of using the probability mass function of the policy, we will instead use the probability density function as a substitute(@lillicrap2019continuous). The fact that the pdf admits values $>1$ is not an issue as we adjust the learning rate accordingly.
:::




## Application of the REINFORCE algorithm.




The Reinforce algorithm is used in 
Here are the results, (Experiments will be rerun, those are placeholder graph)

```{python}
#| echo: false
#| fig-cap: Evolution of the theta parameters with episode number. The hyperparameters are sigma=0.1, learning rate 5e-6....

import polars as pl
import matplotlib.pyplot as plt

import polars as pl
import seaborn as sns


fileName = 'Log/07Apr-17h24m40s/log.csv'
df = pl.read_csv(fileName)

plt.plot(df.select(pl.col('theta_5')), label = 'Theta 5')
plt.plot(df.select(pl.col('theta_4')), label = 'Theta 4')
plt.plot(df.select(pl.col('theta_3')),label = 'Theta 3')
plt.plot(df.select(pl.col('theta_2')),label = 'Theta 2')
plt.plot(df.select(pl.col('theta_1')),label = 'Theta 1')
plt.plot(df.select(pl.col('theta_0')),label = 'Theta 0')
plt.legend()
plt.xlabel('Episode number')
plt.ylabel('Theta')
plt.show()


```

```{python}
#| echo: false
#| fig-cap: Evolution of the average reward inside the episode with episode number. The hyperparameters are sigma=0.1, learning rate 5e-6.... The variance is high! The trendline is a polynomial fit not to be trusted too much.
import numpy as np

reward = df.select(pl.col('avg_ep_reward')).to_numpy().reshape(30000)
ep_number = np.arange(0,30000)
fit = np.polyfit(ep_number,reward,5)
p = np.poly1d(fit)

plt.plot(reward)
plt.plot(ep_number,p(ep_number))
plt.xlabel('Episode number')
plt.ylabel('Average reward of the episode.')
plt.show()
```

there are problem with the results, namely

- The learning rate must be kept low, otherwise things explode nastily.
- The convergence is extremely slow, to the point were we may be wondering if it converges at all

(The next sections are things I've done to mitigate these problem, with varying degrees of successes, the log are there, but also I need to clean up my code and rerun it for reproducibility sake as I was tinkering a lot at the time, the goal is to have a program were each hyperparameter can be chosen at the beginning/as environment variables, and making all the experiments easily reproducible).



## Exploration vs exploitation tradeoff.

Changing $\sigma^2$ to a higher value makes for a flatter gradient, so not only are we taking more risks, we can actually afford a higher learning rate without exploding!


## Gradient ascent with different learning parameters. 

Here is how we can get better convergence by changing the learning parameters.

One problem is that if we look at the gradient directions, how steep they are depend on the problem parameters. And since $n$ can vary between 5 and 300, this make for a muuuuuch steeper gradient than the direction associated with $b$, which only varies between 0 and 1. As a result, the direction associated with $n$ tend to converge but not the other. This can be remedied by applying varying learning rate in each direction. It actually works quite well!
'

## Impact of initial condition.

Gradient based algorithm have a tendency to converge to local minima. (in our case maxima, but same thing really), therefore, it would be interesting to see how initial policy impacts the learned policy now that we have convergence.
(Not done yet, but I suspect some nasty surprises!)


## Moving beyond the basics.

(Some discussion on what to do next, etc... ) Example include.

- Better algorithm, with less sample variance and more sample efficiency.
- Moving beyond a linear policy. (approximation using NN).
- Meta learning, maybe?
- Applying the concept learned here to a more varied set of problem, instead of just confining ourselves to steady state diffusion-convection equation.


